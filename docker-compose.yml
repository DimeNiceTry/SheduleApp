version: "3.9"

services:
  csharp-generator:
    build:
      context: .
      dockerfile: ./University Schedule Generator/Dockerfile
    container_name: csharp-generator
    ports:
      - "8000:8080"  
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongo:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      elasticsearch:
        condition: service_started
    environment:
      ConnectionStrings__DefaultConnection: "Host=postgres;Port=5432;Database=university;Username=postgres;Password=postgres"
      RedisOptions__Configuration: "redis:6379"
      ElasticsearchOptions__Uri: "http://elasticsearch:9200"
      MongoDbSettings__ConnectionString: "mongodb://admin:password@mongo:27017/?authSource=admin"
      MongoDbSettings__Database: "university"
      Neo4jOptions__Uri: "bolt://neo4j:7687"
      Neo4jOptions__Username: "neo4j"
      Neo4jOptions__Password: "password"
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  python-lab1:
    build:
      context: .
      dockerfile: ./University Schedule Lab1 Python/Dockerfile
    container_name: python-lab1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      elasticsearch:
        condition: service_started
    environment:
      LAB1_POSTGRES_DSN: postgresql://postgres:postgres@postgres:5432/university
      LAB1_REDIS_URL: redis://redis:6379/0
      LAB1_ELASTIC_URL: http://elasticsearch:9200
      LAB1_ELASTIC_INDEX: materials
      LAB1_NEO4J_URI: bolt://neo4j:7687
      LAB1_NEO4J_USER: neo4j
      LAB1_NEO4J_PASSWORD: password
      LAB1_REPORT_LIMIT: "10"
      LAB1_ELASTIC_SEARCH_LIMIT: "3000"
    ports:
      - "8100:8080"
    volumes:
      - ./logs/python-lab1:/app/logs
    restart: unless-stopped

  python-lab2:
    build:
      context: .
      dockerfile: ./University Schedule Lab2 Python/Dockerfile
    container_name: python-lab2
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    environment:
      LAB2_POSTGRES_DSN: postgresql://postgres:postgres@postgres:5432/university
      LAB2_NEO4J_URI: bolt://neo4j:7687
      LAB2_NEO4J_USER: neo4j
      LAB2_NEO4J_PASSWORD: password
    ports:
      - "8110:8080"
    volumes:
      - ./logs/python-lab2:/app/logs
    restart: unless-stopped

  python-gateway:
    build:
      context: .
      dockerfile: ./University Schedule Gateway Python/Dockerfile
    container_name: python-gateway
    depends_on:
      postgres:
        condition: service_healthy
      python-lab1:
        condition: service_started
    environment:
      GATEWAY_POSTGRES_DSN: postgresql://postgres:postgres@postgres:5432/gateway_auth
      GATEWAY_JWT_SECRET: )wmbpam3f%_qe_kg*no-+^nc2dzz(z@d-ijc1mt&ua5^mb&mb+
      GATEWAY_JWT_EXPIRE_HOURS: "12"
      GATEWAY_LAB1_SERVICE_URL: http://python-lab1:8080
    ports:
      - "8200:8080"
    volumes:
      - ./logs/python-gateway:/app/logs
    restart: unless-stopped

  postgres:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: university
      POSTGRES_INITDB_ARGS: "--auth-local=trust --auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./logs/postgres:/var/log/postgresql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d university"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    command: redis-server --appendonly yes --appendfsync everysec
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./logs/redis:/var/log/redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  mongo:
    image: mongo:6
    container_name: mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - ./logs/mongodb:/var/log/mongodb
    command: mongod --logpath /var/log/mongodb/mongod.log --logappend
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s

  neo4j:
    image: neo4j:5
    container_name: neo4j
    restart: unless-stopped
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_dbms_default__database=neo4j
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_connector_bolt_listen__address=0.0.0.0:7687
      - NEO4J_dbms_connector_http_listen__address=0.0.0.0:7474
    ports:
      - "7474:7474"  
      - "7687:7687"  
    volumes:
      - neo4j_data:/data
      - ./logs/neo4j:/logs
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:7474/"]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 60s

  elasticsearch:
    image: elasticsearch:8.14.3
    container_name: elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - cluster.name=university-cluster
      - node.name=university-node
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - es_data:/usr/share/elasticsearch/data
      - ./logs/elasticsearch:/usr/share/elasticsearch/logs
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 60s

  # UI Tools for Database Management
  
  kibana:
    image: kibana:8.14.3
    container_name: kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=kibana
      - SERVER_HOST=0.0.0.0
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_started
    volumes:
      - kibana_data:/usr/share/kibana/data

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_URL: mongodb://admin:password@mongo:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin
    ports:
      - "8081:8081"
    depends_on:
      mongo:
        condition: service_healthy

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8082:8081"
    depends_on:
      redis:
        condition: service_healthy

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mongo_data:
    driver: local
  neo4j_data:
    driver: local
  es_data:
    driver: local
  kibana_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  default:
    name: university_network
