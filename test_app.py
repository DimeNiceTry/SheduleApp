#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π ScheduleApp
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–¥–∞–Ω–∏—é –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã
"""

import asyncio
import aiohttp
import json
from datetime import datetime

class ScheduleAppTester:
    def __init__(self, base_url="http://localhost:8000"):
        self.base_url = base_url
        
    async def test_health_check(self, session):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª—É–∂–±"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª—É–∂–±...")
        async with session.get(f"{self.base_url}/health") as response:
            data = await response.json()
            print(f"–°—Ç–∞—Ç—É—Å: {data.get('status')}")
            
            for service, status in data.get('services', {}).items():
                status_icon = "‚úÖ" if status else "‚ùå"
                print(f"  {status_icon} {service}: {'–¥–æ—Å—Ç—É–ø–µ–Ω' if status else '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
            
            return data.get('status') == 'healthy'
    
    async def test_data_generation(self, session):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        async with session.post(f"{self.base_url}/generate") as response:
            data = await response.json()
            
            if data.get('status') == 'success':
                print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:")
                details = data.get('details', {})
                
                for service, info in details.items():
                    if service not in ['status', 'total_students', 'total_courses']:
                        print(f"  ‚Ä¢ {service}: {info}")
                        
                print(f"\n–í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {details.get('total_students', 0)} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, {details.get('total_courses', 0)} –∫—É—Ä—Å–æ–≤")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {data.get('error')}")
                return False
    
    async def test_crud_operations(self, session):
        """–¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π"""
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π...")
        async with session.post(f"{self.base_url}/demo-crud") as response:
            data = await response.json()
            
            if data.get('status') == 'success':
                print("‚úÖ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ:")
                details = data.get('details', {})
                
                # Redis CRUD
                redis_crud = details.get('redis_crud', {})
                print(f"  üìù Redis: —Å–æ–∑–¥–∞–Ω–∏–µ ‚úÖ, —á—Ç–µ–Ω–∏–µ ‚úÖ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ‚úÖ, —É–¥–∞–ª–µ–Ω–∏–µ ‚úÖ")
                
                # PostgreSQL CRUD  
                postgres_crud = details.get('postgres_crud', {})
                print(f"  üêò PostgreSQL: —á—Ç–µ–Ω–∏–µ ‚úÖ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ‚úÖ, –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚úÖ")
                
                # MongoDB CRUD
                mongodb_crud = details.get('mongodb_crud', {})
                print(f"  üçÉ MongoDB: —á—Ç–µ–Ω–∏–µ ‚úÖ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ‚úÖ, —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ: {mongodb_crud.get('students_count', 0)}")
                
                # Neo4j CRUD
                neo4j_crud = details.get('neo4j_crud', {})
                print(f"  üîó Neo4j: –∫—É—Ä—Å–æ–≤ —É —Å—Ç—É–¥–µ–Ω—Ç–∞: {neo4j_crud.get('read_courses', 0)}, –∑–∞–ø–∏—Å—å –Ω–∞ –∫—É—Ä—Å ‚úÖ")
                
                # Elasticsearch CRUD
                elastic_crud = details.get('elasticsearch_crud', {})
                print(f"  üîç Elasticsearch: –Ω–∞–π–¥–µ–Ω–æ –∫—É—Ä—Å–æ–≤: {elastic_crud.get('search_results', 0)}, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ‚úÖ")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π: {data.get('error')}")
                return False
    
    async def test_specific_endpoints(self, session):
        """–¢–µ—Å—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
        print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...")
        
        # –¢–µ—Å—Ç Redis - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        try:
            async with session.get(f"{self.base_url}/redis/students") as response:
                data = await response.json()
                print(f"  üìù Redis: –ø–æ–ª—É—á–µ–Ω–æ {data.get('count', 0)} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
        except Exception as e:
            print(f"  ‚ùå Redis —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
        
        # –¢–µ—Å—Ç MongoDB - –ø–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø
        try:
            async with session.get(f"{self.base_url}/mongodb/groups") as response:
                data = await response.json()
                print(f"  üçÉ MongoDB: –ø–æ–ª—É—á–µ–Ω–æ {data.get('count', 0)} –≥—Ä—É–ø–ø")
        except Exception as e:
            print(f"  ‚ùå MongoDB —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
        
        # –¢–µ—Å—Ç Elasticsearch - –ø–æ–∏—Å–∫
        try:
            async with session.get(f"{self.base_url}/elasticsearch/search?q=–∫—É—Ä—Å") as response:
                data = await response.json()
                print(f"  üîç Elasticsearch: –Ω–∞–π–¥–µ–Ω–æ {data.get('count', 0)} –∫—É—Ä—Å–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '–∫—É—Ä—Å'")
        except Exception as e:
            print(f"  ‚ùå Elasticsearch —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
        
        # –¢–µ—Å—Ç Neo4j - –∫—É—Ä—Å—ã —Å—Ç—É–¥–µ–Ω—Ç–∞
        try:
            async with session.get(f"{self.base_url}/neo4j/student/1/courses") as response:
                data = await response.json()
                print(f"  üîó Neo4j: —É —Å—Ç—É–¥–µ–Ω—Ç–∞ ID=1 –Ω–∞–π–¥–µ–Ω–æ {data.get('count', 0)} –∫—É—Ä—Å–æ–≤")
        except Exception as e:
            print(f"  ‚ùå Neo4j —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
    
    async def test_data_cleanup(self, session):
        """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüóëÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        async with session.delete(f"{self.base_url}/cleanup") as response:
            data = await response.json()
            
            if data.get('status') == 'success':
                print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã:")
                details = data.get('details', {})
                
                for service, info in details.items():
                    if service != 'error':
                        print(f"  ‚Ä¢ {service}: {info}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {data.get('error')}")
                return False
    
    async def run_full_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ScheduleApp")
        print("=" * 60)
        
        async with aiohttp.ClientSession() as session:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª—É–∂–±
            health_ok = await self.test_health_check(session)
            if not health_ok:
                print("‚ùå –ù–µ –≤—Å–µ —Å–ª—É–∂–±—ã –¥–æ—Å—Ç—É–ø–Ω—ã. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                return False
            
            # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            generate_ok = await self.test_data_generation(session)
            if not generate_ok:
                print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                return False
            
            # 3. CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
            crud_ok = await self.test_crud_operations(session)
            
            # 4. –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
            await self.test_specific_endpoints(session)
            
            # 5. –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            cleanup_ok = await self.test_data_cleanup(session)
            
            print("\n" + "=" * 60)
            if health_ok and generate_ok and crud_ok and cleanup_ok:
                print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
                print("\nüìã –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–¥–∞–Ω–∏—é:")
                print("‚úÖ –ó–∞–¥–∞–Ω–∏–µ ‚Ññ1: –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤—Å–µ—Ö 5 —Å–ª—É–∂–±")
                print("‚úÖ –ó–∞–¥–∞–Ω–∏–µ ‚Ññ2: –ü–æ–ª–Ω—ã–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Å–ª—É–∂–±")
                print("‚úÖ –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:")
                print("   ‚Ä¢ Redis: —Å—Ç—É–¥–µ–Ω—Ç—ã –ø–æ –∫–ª—é—á—É –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–∏")
                print("   ‚Ä¢ MongoDB: –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –≥—Ä—É–ø–ø–∞–º–∏ –∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏")  
                print("   ‚Ä¢ Neo4j: —Å–≤—è–∑–∏ –≥—Ä—É–ø–ø–∞-—Å—Ç—É–¥–µ–Ω—Ç-–∫—É—Ä—Å")
                print("   ‚Ä¢ Elasticsearch: –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –∫—É—Ä—Å–æ–≤")
                print("   ‚Ä¢ PostgreSQL: –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –Ω–µ–¥–µ–ª—è–º")
                return True
            else:
                print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
                return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = ScheduleAppTester()
    
    print("ScheduleApp Test Suite")
    print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Å–ª—É–∂–±—ã –∑–∞–ø—É—â–µ–Ω—ã: docker-compose up -d")
    print()
    
    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    success = await tester.run_full_test()
    
    if success:
        print("\nüèÜ –ü—Ä–æ–µ–∫—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–¥–∞–Ω–∏—é!")
    else:
        print("\n‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏")

if __name__ == "__main__":
    asyncio.run(main())
